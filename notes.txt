Passing props
Data reactivity
ref method in vue
composition api : Modern way
options api : Previous way 

.vue is (single file component): component, views, app.vue 

Example : xyz.com -> /home,/cart, /order 

Component : Banner, Navbar -> Home(views)->App.vue 

Install QUASAR 
productData, mock data created

v-for directive use 
to iterate over array of objects and display them as list items

Life cycle hook : different segment of application , -> created state, mounted state, updated state , unmounted state 

Vue Router : /cart, /home, /admin, /order, 

binding and input : v-model,  import (ref:individual elemnt can use any data structure,reactive: accept multiple input, only for object data structure,)

calling an api : fetching api use fetch method, axios methond with fakestoreapi
api call : always put into onMounted;


Part 11 : Firebase Setup ,
install, file : firebase.js, import all necessary functionality,


Part 12 : 
Q-form : upload file and submit it 
read filedata->how to store to cloud->firebase storage->(url)->img 
use basic q-form from quasar
how to upload a file in vue.js : select file ->
upload form : title, price and imageUrl uqing q form in firebase firestore collection,

Now read and write data :
v-model and reactive connection done , now we have to make post and get request : 
first we do write : post request, then get request, 
setDoc() : 

Chapter 14 : 
v-router : dynamic route


Global state management : 
                        state->component data -><script></script>
                        many to many relationship in component
        ->solution : A data which is accessible for many component we can put it in one file and all component can aceess it,
        eg cart, product need to be accessible from everywhere.

        Cart architecture : read product, -> add to cart ->store.js -> grab the property -> create function inside store.js addToCart()